# boring_ssl_builder
name: Build and Test BoringSSL

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential
          python -m pip install --upgrade pip
          python -m pip install cffi build

      - name: Clone BoringSSL
        run: |
          git clone https://boringssl.googlesource.com/boringssl
          cd boringssl
          git checkout master  # or a specific commit/tag if needed

      - name: Build BoringSSL
        run: |
          mkdir -p boringssl_build
          cd boringssl_build
          cmake -DBUILD_SHARED_LIBS=1 ../boringssl
          make -j$(nproc)
        env:
          CFLAGS: "-fPIC"

      - name: Prepare BoringSSL Binaries
        run: |
          mkdir -p boringssl_binary_build/bssl_binary
          cp boringssl_build/crypto/libcrypto.so boringssl_binary_build/bssl_binary/
          cp boringssl_build/ssl/libssl.so boringssl_binary_build/bssl_binary/

      - name: Build Python Wheel
        run: |
          python -m build
        env:
          CFLAGS: "-fPIC"

      - name: Install Python Wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl

      - name: Run Tests
        run: |
          python test.py
  # # build-and-publish:
  # #     runs-on: ubuntu-latest

  # #     needs: python_check 

  # #     steps:
  # #     - name: Checkout repository
  # #       uses: actions/checkout@v3

  # #     - name: Set up Python
  # #       uses: actions/setup-python@v4
  # #       with:
  # #         python-version: "3.12"

  # #     - name: Install build dependencies
  # #       run: |
  # #         python -m pip install --upgrade pip setuptools wheel twine

  # #     - name: Build Wheel
  # #       run: |
  # #         python setup.py bdist_wheel

  # #     - name: Publish to PyPI
  # #       env:
  # #         TWINE_USERNAME: __token__
  # #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  # #       run: |
  # #         python -m twine upload dist/*

from setuptools import setup, find_packages

setup(
    name='boringssl_binary_build',
    version='0.1.0',
    packages=find_packages(),
    include_package_data=True,
    package_data={
        'boringssl_binary_build': ['bssl_binary/*.so'],
    },
    # Optional: Add other metadata as needed
    author='Your Name',
    author_email='your.email@example.com',
    description='BoringSSL binaries packaged for Python',
    url='https://github.com/yourusername/boringssl_binary_build',
    classifiers=[
        'Programming Language :: Python :: 3',
        'Operating System :: OS Independent',
    ],
)
include boringssl_binary_build/bssl_binary/*.so

from cffi import FFI
import os
import boringssl_binary_build  # Import your installed package

ffi = FFI()

# Define BoringSSL's functions and structures
ffi.cdef("""
typedef struct ssl_st SSL;
typedef struct ssl_ctx_st SSL_CTX;
typedef struct ssl_method_st SSL_METHOD;

SSL *SSL_new(SSL_CTX *ctx);
SSL_CTX *SSL_CTX_new(const SSL_METHOD *method);
const SSL_METHOD *TLS_method(void);
""")

def test_boringssl():
    try:
        # Locate the shared library bundled with the package
        lib_path = os.path.join(os.path.dirname(boringssl_binary_build.__file__), "bssl_binary", "libssl.so")
        print(f"Loading library from: {lib_path}")
        bssl = ffi.dlopen(lib_path)

        # Initialize SSL context and objects
        ctx = bssl.SSL_CTX_new(bssl.TLS_method())
        assert ctx != ffi.NULL, "Failed to create SSL_CTX"

        ssl = bssl.SSL_new(ctx)
        assert ssl != ffi.NULL, "Failed to create SSL"

        print("BoringSSL FFI test passed!")
    except Exception as e:
        print(f"BoringSSL FFI test failed: {e}")
        exit(1)

if __name__ == "__main__":
    test_boringssl()
