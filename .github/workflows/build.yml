name: Build and Upload BoringSSL Wheel to PyPI

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs weekly on Sunday at 00:00 UTC
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'  # Optional: Trigger on version tags

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']  # Python 3.7 to 3.12

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      # 3. Install build dependencies
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel auditwheel cmake

      # 4. Clone and Build BoringSSL
      - name: Clone and Build BoringSSL
        run: |
          echo "Building BoringSSL from source..."
          git clone https://boringssl.googlesource.com/boringssl
          cd boringssl
          mkdir build
          cd build
          cmake -DBUILD_SHARED_LIBS=1 ..
          make -j$(nproc)
          mkdir -p ../boringssl_binary_build/.libs
          cp ssl/libssl.so ../boringssl_binary_build/.libs/
          cp crypto/libcrypto.so ../boringssl_binary_build/.libs/

      # 5. Verify Built Libraries
      - name: Verify Built Libraries
        run: |
          ls -l boringssl_binary_build/.libs

      # 6. Generate Dynamic Pre-Release Version
      - name: Generate Dynamic Pre-Release Version
        id: generate_version
        run: |
          DATE=$(date +%Y%m%d%H%M%S)
          VERSION=0.0.1.dev${DATE}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # 7. Update setup.py with Pre-Release Version
      - name: Update setup.py with Pre-Release Version
        run: |
          sed -i "s/version='0.0.1'/version='${VERSION}'/" setup.py

      # 8. Build Python Wheel
      - name: Build Python Wheel
        run: |
          python setup.py bdist_wheel

      # 9. Repair Wheel with Auditwheel for Manylinux Compliance
      - name: Repair Wheel with Auditwheel
        run: |
          auditwheel repair dist/*.whl -w repaired_dist

      # 10. Test Built Wheel
      - name: Test Built Wheel
        run: |
          python -m pip install repaired_dist/*.whl
          python -c "import boringssl_binary_build; print('Import successful!')"

      # 11. Upload Built Wheels to PyPI Using Twine
      - name: Upload Built Wheels to PyPI
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
        run: |
          python -m pip install --upgrade twine
          twine upload repaired_dist/*.whl
        env:
          TWINE_USERNAME: ${{ secrets.USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PASSWORD }}

      # 12. Notify Success
      - name: Notify Success
        if: success()
        run: echo "BoringSSL wheel built and uploaded successfully!"

      # 13. Notify Failure
      - name: Notify Failure
        if: failure()
        run: echo "BoringSSL wheel build or upload failed."

