name: Build and Test BoringSSL

on:
  push:
    branches:
      - main

jobs:
  build_boringssl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build BoringSSL
        run: |
          set -e
          git clone https://boringssl.googlesource.com/boringssl
          mkdir bssl_build
          cd bssl_build
          cmake -DBUILD_SHARED_LIBS=1 ../boringssl
          make bssl
          # Debug to confirm build output
          echo "Build Output:"
          ls -R ssl

      - name: Package BoringSSL as Python Wheel
        run: |
          set -e
          mkdir -p boringssl_package
          cp bssl_build/ssl/libssl.so boringssl_package/ || (echo "libssl.so not found!" && exit 1)
          python3 setup.py bdist_wheel
        env:
          CFLAGS: "-fPIC"

  python_check:
    runs-on: ubuntu-latest
    needs: build_boringssl

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download BoringSSL Wheel
        uses: actions/download-artifact@v3
        with:
          name: boringssl-wheel
          path: boringssl_whl/

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install BoringSSL Package
        run: |
          python -m pip install --upgrade pip
          python -m pip install boringssl_whl/dist/*.whl

      - name: Check BoringSSL Compatibility
        run: |
          python test.py

  # build-and-publish:
  #     runs-on: ubuntu-latest

  #     needs: python_check 

  #     steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.12"

  #     - name: Install build dependencies
  #       run: |
  #         python -m pip install --upgrade pip setuptools wheel twine

  #     - name: Build Wheel
  #       run: |
  #         python setup.py bdist_wheel

  #     - name: Publish to PyPI
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         python -m twine upload dist/*

