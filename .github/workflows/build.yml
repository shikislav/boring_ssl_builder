name: Build, Test, and Publish

on:
  schedule:
    - cron: "0 0 */2 * *" # Runs every 2 days
  workflow_dispatch: # Allows manual trigger

  push:

jobs:
  build_boringssl:
    runs-on: ubuntu-latest

  outputs:
    boringssl_path: ${{ steps.set_boringssl_path.outputs.boringssl_path }}

  steps:
  - name: Checkout repository
    uses: actions/checkout@v3

  - name: Build BoringSSL
    run: |
      git clone https://boringssl.googlesource.com/boringssl
      cd boringssl && mkdir build && cd build
      cmake -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=x86_64 -DBUILD_SHARED_LIBS=1 .. && make

  - name: Move Built File to `bssl_binary`
    run: |
      mv boringssl/build/ssl/libssl.so ${{ github.workspace }}/bssl_binary/libssl.so

  - name: Set BoringSSL Path
    id: set_boringssl_path
    run: echo "::set-output name=boringssl_path::${{ github.workspace }}/bssl_binary/libssl.so"

  - name: Clean up Source Code
    run: rm -rf boringssl


    python_check:
      runs-on: ubuntu-latest
      needs: build_boringssl 

      strategy:
        matrix:
          python-version: ["3.10", "3.11", "3.12"]

      steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install cffi
        run: |
          python -m pip install --upgrade pip cffi

      - name: Debug BoringSSL Library Path
        run: |
          echo "Checking BoringSSL library path:"
          echo "${{ needs.build_boringssl.outputs.boringssl_path }}"

      - name: Check BoringSSL Compatibility
        run: |
          python test.py --lib-path "${{ needs.build_boringssl.outputs.boringssl_path }}"


  build-and-publish:
      runs-on: ubuntu-latest

      needs: python_check 

      steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel twine

      - name: Build Wheel
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload dist/*

