name: Build, Test, and Publish

on:
  schedule:
    - cron: "0 0 */2 * *" # Runs every 2 days
  workflow_dispatch: # Allows manual trigger

  push:

jobs:
  build_boringssl:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Build BoringSSL
      run: |
        git clone https://boringssl.googlesource.com/boringssl
        cd boringssl && mkdir build && cd build
        cmake -DBUILD_SHARED_LIBS=1 .. && make

    - name: Copy libssl.so to `bssl_binary` directory
      run: |
        mv ${{ github.workspace }}/boringssl/build/ssl/libssl.so ./boringssl_binary_build/libssl.so

    - name: Remove source code
      run: |
        rm -fr ./borringssl

    outputs:
      boringssl-path: ./boringssl_binary_build/libssl.so

  python_check:
    runs-on: ubuntu-latest

    needs: build_boringssl  # Wait for BoringSSL build to complete

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install cffi
      run: |
        python -m pip install --upgrade pip cffi

    - name: Debug BoringSSL Library Path
      run: |
        ls
        echo "Checking BoringSSL library path:"
        ls -l ${{ needs.build_boringssl.outputs.boringssl-path }}

    - name: Check BoringSSL Compatibility
      run: |
        ls
        python test.py --lib-path ${{ needs.build_boringssl.outputs.boringssl-path }}

  # build-and-publish:
  #   runs-on: ubuntu-latest

  #   needs: python_check 

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3

  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.12"

  #   - name: Install build dependencies
  #     run: |
  #       python -m pip install --upgrade pip setuptools wheel twine

  #   - name: Build Wheel
  #     run: |
  #       python setup.py sdist bdist_wheel

  #   - name: Publish to PyPI
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #     run: |
  #       python -m twine upload dist/*

